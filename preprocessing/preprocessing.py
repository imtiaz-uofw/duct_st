# -*- coding: utf-8 -*-
"""Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zp-_pD9VCUTtbyCmtsh_a1wLf0ycPgDr
"""

#Adding a new object to the anndata
adata.obs['thing'] = 'a'

#Plotting the adata with the new object
plt.rcParams["figure.figsize"] = (8, 8)
sc.pl.spatial(adata, color = 'thing')

#Checking whether the object added in the anndata obs
adata

"""# Mitocondrial Genes are not in Dataset. In this process it was skipped.
#adata.var["mt"] = adata.var_names.str.startswith("MT-")
#sc.pp.calculate_qc_metrics(adata, qc_vars=["mt"], inplace=True)

# Ribo Genes are not in Dataset. So it is skipped in this process.
# adata.var['ribo'] = adata.var_names.str.startswith(("RPS","RPL"))
# sc.pp.calculate_qc_metrics(adata, qc_vars=["ribo"], inplace=True)
"""

# Assembling some information about hemoglobin genes, which are important for quality control.
# With pp.calculate_qc_metrics, we can compute many metrics very efficiently.
adata.var['hb'] = adata.var_names.str.contains(("^HB[^(P)]"))
sc.pp.calculate_qc_metrics(adata, qc_vars=["hb"], inplace=True)

#Checking the adata obs with the updated metrics from the hemoglobin genes
adata.obs

#Based on the updated genes from hemoglobin genes metrics, four different shaped bar plots here to understand the genes.
fig, axs = plt.subplots(1, 4, figsize=(15, 4))
sns.distplot(adata.obs["total_counts"], kde=False, ax=axs[0])
sns.distplot(adata.obs["total_counts"][adata.obs["total_counts"] < 10000], kde=False, bins=40, ax=axs[1])
sns.distplot(adata.obs["n_genes_by_counts"], kde=False, bins=60, ax=axs[2])
sns.distplot(adata.obs["n_genes_by_counts"][adata.obs["n_genes_by_counts"] < 4000], kde=False, bins=60, ax=axs[3])
plt.show()

#Plotting the total_genes less than 2000
sns.distplot(adata.obs["total_counts"][adata.obs["total_counts"] < 2000], kde=False, bins=40)

#Violin plotting of the total genes and pct_counts_hb
sc.pl.violin(
    adata,
    [
     'n_genes_by_counts',
     'total_counts',
     'pct_counts_hb'
     ],
    multi_panel=True
)

#Plotting the pct_counts_hb in to see the hemoglobin genes expression or total counts
p3 = sc.pl.scatter(adata, "total_counts", "n_genes_by_counts", color="pct_counts_hb")

#Filtering adata based on the value of the pct_counts_hb >=0.001 and updated the adata with new shaped genes
adata = adata[adata.obs["pct_counts_hb"] >= 0.001]

sc.pp.filter_genes(adata, min_cells=3)

#Plotting the adata with the thing object to see whether the genes are reduced
plt.rcParams["figure.figsize"] = (8, 8)
sc.pl.spatial(adata, color = 'thing')