# -*- coding: utf-8 -*-
"""Squidpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/163vZnGlxPfKH_unfIvd9a8HicaGbIxmz
"""

#Installing Squidpy
!pip install squidpy

#Importing squidpy libraries
import scanpy as sc
import squidpy as sq
sc.settings.verbosity = 3
sc.settings.set_figure_params(dpi=80, facecolor="white")

# nearest neighbor graph
sc.pp.neighbors(adata)
nn_graph_genes = adata.obsp["connectivities"]
# spatial proximity graph
sq.gr.spatial_neighbors(adata)
nn_graph_space = adata.obsp["spatial_connectivities"]

#adding the two graphs and compute leiden on the joint graph
#weight the importance of each graph based on an hyperparameters alpha
alpha = 0.2
joint_graph = (1 - alpha) * nn_graph_genes + alpha * nn_graph_space
sc.tl.leiden(adata, adjacency=joint_graph, key_added="squidpy_domains")

##Plotting the adata with Squidpy
sq.pl.spatial_scatter(adata, color=["squidpy_domains"], wspace=0.9)

#Plotting the clusters of Squidpy Algorithm
with rc_context({'figure.figsize': (5, 5)}):
    sc.pl.umap(adata, color='squidpy_domains', add_outline=True, legend_loc='on data',
               legend_fontsize=12, legend_fontoutline=2,frameon=False,
               title='clustering of cells', palette='Set1')

#Creating new adata with the hclust clustering for marker genes
adata6 = adata

#Using the wilcoxon method and squidpy to finding out the marker genes from adata
sc.tl.rank_genes_groups(adata6, 'squidpy_domains', method='wilcoxon')

#Coverting the dataframe with matrices to find out the marker genes
resultsSP = adata6.uns['rank_genes_groups']
('0', '1', '2', '3', '4')

outSP = np.array([[0,0,0,0,0]])
for group in resultsSP['names'].dtype.names:
    outSP = np.vstack((outSP, np.vstack((resultsSP['names'][group],
                                     resultsSP['scores'][group],
                                     resultsSP['pvals_adj'][group],
                                     resultsSP['logfoldchanges'][group],
                                     np.array([group] * len(resultsSP['names'][group])).astype('object'))).T))



markersSP = pd.DataFrame(outSP[1:], columns = ['Gene', 'scores', 'pval_adj', 'lfc', 'cluster'])

markersSP = markersSP[(markersSP.pval_adj < 0.05) & (abs(markersSP.lfc) > 1)]

#Printing the marker genes from squidpy
markersSP

#Checking the total number of marker genes per group using squidpy
pd.DataFrame(adata6.uns['rank_genes_groups']['names']).head(20000)