# -*- coding: utf-8 -*-
"""K-means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/163vZnGlxPfKH_unfIvd9a8HicaGbIxmz
"""

#Importing k-means libraries
from sklearn.cluster import KMeans
from sklearn.metrics import adjusted_rand_score

# extract pca coordinates
X_pca = adata.obsm['X_pca']

#Training the pca components of the data and adding to the dataset
kmeans = KMeans(n_clusters=10, random_state=0).fit(X_pca)
adata.obs['kmeans'] = kmeans.labels_.astype(str)

#Plotting the clusters of k-means Algorithms
plt.rcParams["figure.figsize"] = (4, 4)
sc.pl.umap(adata, color=["total_counts", "n_genes_by_counts", "kmeans"], wspace=0.4)

#With rc_context plotting the clustering of cells using kmeans
with rc_context({'figure.figsize': (5, 5)}):
    sc.pl.umap(adata, color='kmeans', add_outline=True, legend_loc='on data',
               legend_fontsize=12, legend_fontoutline=2,frameon=False,
               title='clustering of cells', palette='Set1')

#Creating new adata with the kmeans clustering for marker genes
adata4 = adata

#Using the wilcoxon method and leiden finding out the marker genes from adata
sc.tl.rank_genes_groups(adata4, 'kmeans', method='wilcoxon')

#Coverting the dataframe with matrices to find out the marker genes
resultsKM = adata4.uns['rank_genes_groups']
('0', '1', '2', '3', '4')

outKM = np.array([[0,0,0,0,0]])
for group in resultsKM['names'].dtype.names:
    outKM = np.vstack((outKM, np.vstack((resultsKM['names'][group],
                                     resultsKM['scores'][group],
                                     resultsKM['pvals_adj'][group],
                                     resultsKM['logfoldchanges'][group],
                                     np.array([group] * len(resultsKM['names'][group])).astype('object'))).T))



markersKM = pd.DataFrame(outKM[1:], columns = ['Gene', 'scores', 'pval_adj', 'lfc', 'cluster'])

markersKM = markersKM[(markersKM.pval_adj < 0.05) & (abs(markersKM.lfc) > 1)]

#Printing the marker genes from louvain
markersKM

#Checking the total number of marker genes per group using Louvain
pd.DataFrame(adata4.uns['rank_genes_groups']['names']).head(20000)