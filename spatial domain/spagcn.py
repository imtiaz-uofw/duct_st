# -*- coding: utf-8 -*-
"""spaGCN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/163vZnGlxPfKH_unfIvd9a8HicaGbIxmz
"""

#Installing spaGCN
!pip install SpaGCN

#Importing libraries
import PIL

#defining pixel values of the histological image of the spatial dataset
PIL.Image.MAX_IMAGE_PIXELS = 933120000

#Importing libraries
import SpaGCN as spg
from PIL import Image
import requests

#creating an array with the image pixel
img = np.asarray(
    Image.open(
            "/content/drive/MyDrive/breastcancer/Visium_FFPE_Human_Breast_Cancer_image.tif",
    )
)

#Creating new adata
adata7=adata

#Setting the coordinates
x_array = adata7.obs["array_row"].tolist()
y_array = adata7.obs["array_col"].tolist()
x_pixel = (adata7.obsm["spatial"][:, 0]).tolist()
y_pixel = adata7.obsm["spatial"][:, 1].tolist()

#Calculating the adjacent matrix
adj = spg.calculate_adj_matrix(
    x=x_pixel,
    y=y_pixel,
    x_pixel=x_pixel,
    y_pixel=y_pixel,
    image=img,
    beta=55,
    alpha=1,
    histology=True,
)

#making the var names unique for the new data
adata7.var_names_make_unique()

#filtering the spatial genes with cell=5
sc.pp.filter_genes(adata7, min_cells=5)

#finding mitochondrial (MT) genes though the dataset doesn't have any
adata.var["MT_gene"] = [gene.startswith("MT-") for gene in adata.var_names]
#removing MT genes (keeping their counts in the object)
adata.obsm["MT"] = adata[:, adata.var["MT_gene"].values].X.toarray()
adata = adata[:, ~adata.var["MT_gene"].values].copy()

#Normalizing and taking log for UMI
sc.pp.normalize_total(adata7)
sc.pp.log1p(adata7)

p = 0.5
#Finding the l value given p
l = spg.search_l(p, adj)

#Searching for suitable resolution
res = spg.search_res(adata7, adj, l, target_num=15)

#setting up spaGCN model
model = spg.SpaGCN()
model.set_l(l)

#Training the model
model.train(adata7, adj, res=res)

#Predicting using the model
y_pred, prob = model.predict()

#adding the new spaGCN domain to the anndata
adata7.obs["spaGCN_domains"] = y_pred
adata7.obs["spaGCN_domains"] = adata7.obs["spaGCN_domains"].astype("category")

#plotting the spaGCN domain
sq.pl.spatial_scatter(adata7, color=["spaGCN_domains"])

#Calculateing adj matrix using xy only
adj_2d = spg.calculate_adj_matrix(x=x_array, y=y_array, histology=False)

#Creating a category of in the anndata
adata7.obs["spaGCN_domains"] = adata7.obs["spaGCN_domains"].astype(
    "category"
)

#replotting the spaGCN domain
sq.pl.spatial_scatter(adata7, color=["spaGCN_domains"])

#Principal Component Analysis of the adata
sc.pp.pca(adata7)
#compute the neighborhood graph of cells using the PCA representation of the adata matrix
sc.pp.neighbors(adata7)
#embedding the graph in two dimensions using UMAP
sc.tl.umap(adata7)

#Plotting the clusters of spaGCN Algorithms
plt.rcParams["figure.figsize"] = (4, 4)
sc.pl.umap(adata7, color=["total_counts", "n_genes_by_counts", "spaGCN_domains"], wspace=0.4)

#Plotting the clusters of spaGCN Algorithm
with rc_context({'figure.figsize': (5, 5)}):
    sc.pl.umap(adata7, color='spaGCN_domains', add_outline=True, legend_loc='on data',
               legend_fontsize=12, legend_fontoutline=2,frameon=False,
               title='clustering of cells', palette='Set1')

#Using the wilcoxon method and spaGCN to finding out the marker genes from adata
sc.tl.rank_genes_groups(adata7, 'spaGCN_domains', method='wilcoxon')

#Coverting the dataframe with matrices to find out the marker genes
resultsSPG = adata7.uns['rank_genes_groups']
('0', '1', '2', '3', '4')

outSPG = np.array([[0,0,0,0,0]])
for group in resultsSPG['names'].dtype.names:
    outSPG = np.vstack((outSPG, np.vstack((resultsSPG['names'][group],
                                     resultsSPG['scores'][group],
                                     resultsSPG['pvals_adj'][group],
                                     resultsSPG['logfoldchanges'][group],
                                     np.array([group] * len(resultsSPG['names'][group])).astype('object'))).T))



markersSPG = pd.DataFrame(outSPG[1:], columns = ['Gene', 'scores', 'pval_adj', 'lfc', 'cluster'])

markersSPG = markersSPG[(markersSPG.pval_adj < 0.05) & (abs(markersSPG.lfc) > 1)]

#Printing the marker genes from spaGCN
markersSPG

#Checking the total number of marker genes per group using spaGCN
pd.DataFrame(adata7.uns['rank_genes_groups']['names']).head(20000)