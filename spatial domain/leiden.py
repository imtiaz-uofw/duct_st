# -*- coding: utf-8 -*-
"""Leiden.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zp-_pD9VCUTtbyCmtsh_a1wLf0ycPgDr
"""

#Installing leiden
!pip install leidenalg

#Principal Component Analysis of the adata
sc.pp.pca(adata)
#compute the neighborhood graph of cells using the PCA representation of the adata matrix
sc.pp.neighbors(adata)
#embedding the graph in two dimensions using UMAP
sc.tl.umap(adata)
#Plot the clusters, Leiden clustering directly clusters the neighborhood graph of cells.
sc.tl.leiden(adata)

#Plotting the clusters of Leiden Algorithms
plt.rcParams["figure.figsize"] = (4, 4)
sc.pl.umap(adata, color=["total_counts", "n_genes_by_counts", "leiden"], wspace=0.4)

#importing libraries
from matplotlib.pyplot import rc_context

#With rc_context plotting the clustering of cells using Leiden
with rc_context({'figure.figsize': (5, 5)}):
    sc.pl.umap(adata, color='leiden', add_outline=True, legend_loc='on data',
               legend_fontsize=12, legend_fontoutline=2,frameon=False,
               title='clustering of cells', palette='Set1')

#Creating new adata with the leiden clustering for marker genes
adata2 = adata

#Using the wilcoxon method and leiden finding out the marker genes from adata
sc.tl.rank_genes_groups(adata2, 'leiden', method='wilcoxon')

#Coverting the dataframe with matrices to find out the marker genes
resultsLD = adata2.uns['rank_genes_groups']
('0', '1', '2', '3', '4')

outLD = np.array([[0,0,0,0,0]])
for group in resultsLD['names'].dtype.names:
    outLD = np.vstack((outLD, np.vstack((resultsLD['names'][group],
                                     resultsLD['scores'][group],
                                     resultsLD['pvals_adj'][group],
                                     resultsLD['logfoldchanges'][group],
                                     np.array([group] * len(resultsLD['names'][group])).astype('object'))).T))



markersLD = pd.DataFrame(outLD[1:], columns = ['Gene', 'scores', 'pval_adj', 'lfc', 'cluster'])

markersLD = markersLD[(markersLD.pval_adj < 0.05) & (abs(markersLD.lfc) > 1)]

#Printing the marker genes from leiden
markersLD

#Checking the total number of marker genes per group using Leiden
pd.DataFrame(adata2.uns['rank_genes_groups']['names']).head(20000)